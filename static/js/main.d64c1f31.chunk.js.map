{"version":3,"sources":["utils/constants.js","utils/helpers.js","img/bg.png","utils/styles.js","components/Stage.js","components/SideBar.js","components/Tetris.js","utils/hooks.js","App.js","index.js"],"names":["STAGE_TYPE_CLEAR","STAGE_TYPE_MERGED","TETROMINOS","shape","color","I","J","L","O","S","T","Z","DEFAULT_TETROMINO","parseInt","Object","keys","DEFAULT_CELL","createStage","Array","from","fill","checkCollision","_ref","stage","_ref2","tetromino","pos","x","posX","y","posY","moveX","moveY","idxOne","length","idxTwo","ONE","TWO","getTetromino","key","getRandomTetromino","ALL_TETROMINOS","Math","floor","random","PropTypes","arrayOf","oneOf","THEME","font","colors","black","dark1","dark2","dark3","red","StyledCell","styled","div","type","css","rgba","border","borderColor","StyledDisplayListItem","li","theme","_ref3","_ref4","gameOver","_ref5","StyledStage","_ref6","StyledTetrisWrapper","size","bgImage","_ref7","StyledTetris","StyledSidebar","aside","StyledStartButton","button","_ref8","_ref9","GlobalStyle","createGlobalStyle","fontFace","fontFamily","fontFilePath","fileFormats","Stage","_jsx","children","map","row","SideBar","score","rows","level","reset","_jsxs","style","margin","paddingLeft","_Fragment","onClick","Tetris","state","setState","useState","dropTime","calcDropTime","player","updatePlayerPos","resetPlayer","playerRotate","usePlayer","setPlayer","collided","rotate","dir","mtrx","_","index","column","reverse","prev","copy","useCallback","STAGE_WIDTH","CLONED_PLAYER","JSON","parse","stringify","offset","rowsCleared","resetStage","useStage","setStage","setRowsCleared","useEffect","prevStage","NEW_STAGE","cell","forEach","rowIdx","value","valueiIdx","reduce","all","findIndex","unshift","setGameStatus","resetGame","NEW_GAME_DEFAULT_STATE","calcScore","LINE_POINTS","useGameStatus","movePlayer","drop","console","log","useInterval","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","onKeyDown","keyCode","onKeyUp","role","tabIndex","App","ThemeProvider","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d64c1f31.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const STAGE_TYPE_CLEAR = 'clear';\nexport const STAGE_TYPE_MERGED = 'merged';\n\nexport const TETROMINOS = {\n  0: {\n    shape: [[0]],\n    color: '#000000',\n  },\n  I: {\n    shape: [\n      [0, 'I', 0, 0],\n      [0, 'I', 0, 0],\n      [0, 'I', 0, 0],\n      [0, 'I', 0, 0],\n    ],\n    color: '#50E3E6',\n  },\n  J: {\n    shape: [\n      [0, 'J', 0],\n      [0, 'J', 0],\n      ['J', 'J', 0],\n    ],\n    color: '#245FDF',\n  },\n  L: {\n    shape: [\n      [0, 'L', 0],\n      [0, 'L', 0],\n      [0, 'L', 'L'],\n    ],\n    color: '#DFAD24',\n  },\n  O: {\n    shape: [\n      ['O', 'O'],\n      ['O', 'O'],\n    ],\n    color: '#DFD924',\n  },\n  S: {\n    shape: [\n      [0, 'S', 'S'],\n      ['S', 'S', 0],\n      [0, 0, 0],\n    ],\n    color: '#30D338',\n  },\n  T: {\n    shape: [\n      [0, 0, 0],\n      ['T', 'T', 'T'],\n      [0, 'T', 0],\n    ],\n    color: '#843DC6',\n  },\n  Z: {\n    shape: [\n      ['Z', 'Z', 0],\n      [0, 'Z', 'Z'],\n      [0, 0, 0],\n    ],\n    color: '#E34E4E',\n  },\n};\n\nexport const DEFAULT_TETROMINO = parseInt(Object.keys(TETROMINOS)[0], 10);\nexport const DEFAULT_CELL = [DEFAULT_TETROMINO, STAGE_TYPE_CLEAR];\n","import PropTypes from 'prop-types';\nimport {\n  DEFAULT_CELL,\n  STAGE_HEIGHT,\n  STAGE_TYPE_CLEAR,\n  STAGE_TYPE_MERGED,\n  STAGE_WIDTH,\n  TETROMINOS,\n} from './constants';\n\nexport const createStage = () => {\n  return Array.from(Array(STAGE_HEIGHT), () => {\n    return Array(STAGE_WIDTH).fill(DEFAULT_CELL);\n  });\n};\n\nexport const checkCollision = (\n  { tetromino, pos: { x: posX, y: posY } },\n  stage,\n  { x: moveX, y: moveY }\n) => {\n  // Using for loops to be able to return (and break). Not possible with forEach\n  for (let idxOne = 0; idxOne < tetromino.length; idxOne += 1) {\n    for (let idxTwo = 0; idxTwo < tetromino[idxOne].length; idxTwo += 1) {\n      // 1. Check that we're on an actual Tetromino cell\n      if (tetromino[idxOne][idxTwo] !== 0) {\n        const ONE = stage[idxOne + posY + moveY];\n        const TWO = idxTwo + posX + moveX;\n        if (\n          // 2. Check that our move is inside the game areas height (y)\n          // That we're not go through bottom of the play area\n\n          !ONE ||\n          // 3. Check that our move is inside the game areas width (x)\n          !ONE[TWO] ||\n          // 4. Check that the cell wer'e moving to isn't set to clear\n          ONE[TWO][1] !== STAGE_TYPE_CLEAR\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n  // 5. If everything above is false\n  return false;\n};\n\nexport const getTetromino = key => {\n  return TETROMINOS[key];\n};\n\nexport const getRandomTetromino = () => {\n  const ALL_TETROMINOS = Object.keys(TETROMINOS);\n  return getTetromino(\n    ALL_TETROMINOS[Math.floor(Math.random() * (ALL_TETROMINOS.length - 1)) + 1]\n  );\n};\n\nexport const STAGE_PROPS = PropTypes.arrayOf(\n  PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.oneOf([\n        ...DEFAULT_CELL,\n        STAGE_TYPE_MERGED,\n        ...Object.keys(TETROMINOS),\n      ]),\n      PropTypes.oneOf([STAGE_TYPE_CLEAR, STAGE_TYPE_MERGED])\n    )\n  )\n);\n","export default __webpack_public_path__ + \"static/media/bg.d63cfd51.png\";","import { border, borderColor, fontFace, rgba, size } from 'polished';\nimport styled, { createGlobalStyle, css } from 'styled-components';\nimport bgImage from '../img/bg.png';\nimport { STAGE_HEIGHT, STAGE_WIDTH } from './constants';\n\nexport const THEME = {\n  font: 'Pixel, Arial, Helvetica, sans-serif',\n  colors: {\n    black: '#000',\n    dark1: '#111',\n    dark2: '#333',\n    dark3: '#999',\n    red: '#F44336',\n  },\n};\n\nexport const StyledCell = styled.div`\n  ${({ color, type }) => {\n    return css`\n      background: ${rgba(color, 0.8)};\n      ${border(type === 0 ? type : 4, 'solid')}\n      ${borderColor(\n        rgba(color, 1),\n        rgba(color, 1),\n        rgba(color, 0.1),\n        rgba(color, 0.3)\n      )}\n    width: auto;\n    `;\n  }}\n`;\n\nexport const StyledDisplayListItem = styled.li`\n  background: ${({ theme }) => {\n    return theme.colors.black;\n  }};\n  border-radius: 20px;\n  border: 4px solid\n    ${({ theme }) => {\n      return theme.colors.dark2;\n    }};\n  box-sizing: border-box;\n  color: ${({ gameOver, theme }) => {\n    return gameOver ? theme.colors.red : theme.colors.dark3;\n  }};\n  display: flex;\n  font-family: ${({ theme }) => {\n    return theme.font;\n  }};\n  font-size: 0.8rem;\n  margin: 0 0 20px 0;\n  min-height: 30px;\n  padding: 20px;\n  width: 100%;\n`;\n\nexport const StyledStage = styled.div`\n  display: grid;\n  background: #111;\n  border: 2px solid\n    ${({ theme }) => {\n      return theme.colors.dark2;\n    }};\n  grid-gap: 1px;\n  grid-template-columns: repeat(${STAGE_WIDTH}, 1fr);\n  grid-template-rows: repeat(${STAGE_HEIGHT}, calc(25vw / ${STAGE_WIDTH}));\n  max-width: 25vw;\n  width: 100%;\n`;\n\nexport const StyledTetrisWrapper = styled.div`\n  ${size('100vh')};\n  background-size: cover;\n  background: url(${bgImage})\n    ${({ theme }) => {\n      return theme.colors.black;\n    }};\n  overflow: hidden;\n`;\n\nexport const StyledTetris = styled.div`\n  align-items: flex-start;\n  display: flex;\n  margin: 0 auto;\n  max-width: 900px;\n  padding: 40px;\n`;\n\nexport const StyledSidebar = styled.aside`\n  display: block;\n  max-width: 200px;\n  padding: 0 20px;\n  width: 100%;\n`;\n\nexport const StyledStartButton = styled.button`\n  background: ${({ theme }) => {\n    return theme.colors.dark2;\n  }};\n  border-radius: 20px;\n  border: none;\n  box-sizing: border-box;\n  color: white;\n  cursor: pointer;\n  font-family: ${({ theme }) => {\n    return theme.font;\n  }};\n  font-size: 1rem;\n  margin: 0 0 20px 0;\n  min-height: 30px;\n  outline: none;\n  padding: 20px;\n  width: 100%;\n`;\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n  }\n\n  ${fontFace({\n    fontFamily: 'Pixel',\n    fontFilePath: '/font/Pixel-LCD-7',\n    fileFormats: ['woff'],\n  })}\n`;\n","import React from 'react';\nimport { StyledCell, StyledStage } from '../utils/styles';\nimport { getTetromino, STAGE_PROPS } from '../utils/helpers';\n\nconst Stage = ({ stage }) => {\n  return (\n    <StyledStage>\n      {stage.map(row => {\n        return row.map(([type], key) => {\n          const { color } = getTetromino(type);\n          return <StyledCell {...{ key, type, color }} />;\n        });\n      })}\n    </StyledStage>\n  );\n};\n\nStage.propTypes = {\n  stage: STAGE_PROPS.isRequired,\n};\n\nexport default Stage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  StyledStartButton,\n  StyledDisplayListItem,\n  StyledSidebar,\n} from '../utils/styles';\n\nconst SideBar = ({ gameOver, score, rows, level, reset }) => {\n  return (\n    <StyledSidebar>\n      <ul style={{ margin: 0, paddingLeft: 0 }}>\n        {gameOver ? (\n          <StyledDisplayListItem {...{ gameOver }}>\n            Game Over\n          </StyledDisplayListItem>\n        ) : (\n          <>\n            <StyledDisplayListItem>\n              Score:\n              {score}\n            </StyledDisplayListItem>\n            <StyledDisplayListItem>\n              rows:\n              {rows}\n            </StyledDisplayListItem>\n            <StyledDisplayListItem>\n              Level:\n              {level}\n            </StyledDisplayListItem>\n          </>\n        )}\n      </ul>\n      <StyledStartButton onClick={reset}>Start Game</StyledStartButton>\n    </StyledSidebar>\n  );\n};\n\nSideBar.propTypes = {\n  gameOver: PropTypes.bool.isRequired,\n  score: PropTypes.number.isRequired,\n  rows: PropTypes.number.isRequired,\n  level: PropTypes.number.isRequired,\n  reset: PropTypes.func.isRequired,\n};\n\nexport default SideBar;\n","import React, { useState } from 'react';\nimport { checkCollision } from '../utils/helpers';\nimport { StyledTetrisWrapper, StyledTetris } from '../utils/styles';\nimport {\n  useInterval,\n  usePlayer,\n  useStage,\n  useGameStatus,\n} from '../utils/hooks';\n\n// Components\nimport Stage from './Stage';\nimport SideBar from './SideBar';\n\nconst Tetris = () => {\n  const [state, setState] = useState({\n    dropTime: null,\n    gameOver: false,\n  });\n\n  const calcDropTime = level => {\n    return 1000 / (level + 1);\n  };\n\n  const { player, updatePlayerPos, resetPlayer, playerRotate } = usePlayer();\n  const { stage, rowsCleared, resetStage } = useStage(player, resetPlayer);\n  const { score, rows, level, setGameStatus, resetGame } =\n    useGameStatus(rowsCleared);\n\n  const movePlayer = x => {\n    const y = 0;\n    if (!checkCollision(player, stage, { x, y })) {\n      updatePlayerPos({ x, y });\n    }\n  };\n\n  const drop = () => {\n    // Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setGameStatus(prev => {\n        return {\n          ...prev,\n          level: prev.level + 1,\n        };\n      });\n\n      // Also increase speed\n\n      setState(prev => {\n        return {\n          ...prev,\n          dropTime: calcDropTime(level) + 200,\n        };\n      });\n    }\n\n    const DEFAULT_Y = 1;\n\n    const collided = checkCollision(player, stage, { x: 0, y: DEFAULT_Y });\n\n    if (collided && player.pos.y < DEFAULT_Y) {\n      console.log('GAME OVER!!!');\n      setState(prev => {\n        return {\n          ...prev,\n          dropTime: null,\n          gameOver: true,\n        };\n      });\n    }\n    updatePlayerPos({ x: 0, y: collided ? 0 : DEFAULT_Y, collided });\n  };\n\n  const dropPlayer = () => {\n    // We don't need to run the interval when we use the arrow down to\n    // move the tetromino downwards. So deactivate it for now.\n\n    setState(prev => {\n      return {\n        ...prev,\n        dropTime: null,\n      };\n    });\n    drop();\n  };\n\n  const { dropTime, gameOver } = state;\n\n  // This one starts the game\n  // Custom hook by Dan Abramov\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  return (\n    <StyledTetrisWrapper\n      onKeyDown={({ keyCode }) => {\n        if (!gameOver) {\n          switch (keyCode) {\n            case 37:\n              movePlayer(-1);\n              break;\n            case 38:\n              playerRotate(stage, 1);\n              break;\n            case 39:\n              movePlayer(1);\n              break;\n            case 40:\n              dropPlayer();\n              break;\n\n            default:\n              break;\n          }\n        }\n      }}\n      onKeyUp={({ keyCode }) => {\n        if (!gameOver) {\n          // Activate the interval again when user releases down arrow.\n          if (keyCode === 40) {\n            setState(prev => {\n              return {\n                ...prev,\n                dropTime: calcDropTime(level),\n              };\n            });\n          }\n        }\n      }}\n      role=\"button\"\n      tabIndex=\"0\"\n    >\n      <StyledTetris>\n        <Stage {...{ stage }} />\n        <SideBar\n          {...{\n            gameOver,\n            score,\n            rows,\n            level,\n            reset: () => {\n              // Reset everything\n              resetStage();\n              setState(prev => {\n                return {\n                  ...prev,\n                  gameOver: false,\n                  dropTime: 1000,\n                };\n              });\n              resetPlayer();\n              resetGame();\n            },\n          }}\n        />\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n","import { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n  checkCollision,\n  createStage,\n  getRandomTetromino,\n  getTetromino,\n} from './helpers';\n\nimport {\n  STAGE_WIDTH,\n  STAGE_TYPE_CLEAR,\n  STAGE_TYPE_MERGED,\n  DEFAULT_TETROMINO,\n} from './constants';\n\nexport const useGameStatus = rowsCleared => {\n  const NEW_GAME_DEFAULT_STATE = {\n    score: 0,\n    rows: 0,\n    level: 0,\n  };\n\n  const [{ score, rows, level }, setGameStatus] = useState({\n    ...NEW_GAME_DEFAULT_STATE,\n  });\n\n  useEffect(() => {\n    const calcScore = () => {\n      const LINE_POINTS = [40, 100, 300, 1200];\n      // We have score\n      if (rowsCleared > 0) {\n        // This is how original Tetris score is calculated\n        setGameStatus(prev => {\n          return {\n            ...prev,\n            score: prev.score + LINE_POINTS[rowsCleared - 1] * (prev.level + 1),\n            rows: prev.rows + rowsCleared,\n          };\n        });\n      }\n    };\n\n    calcScore();\n  }, [rowsCleared]);\n\n  return {\n    score,\n    rows,\n    level,\n    setGameStatus,\n    resetGame: () => {\n      return setGameStatus({ ...NEW_GAME_DEFAULT_STATE });\n    },\n  };\n};\n\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n\n    return () => {};\n  }, [delay]);\n};\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: getTetromino(DEFAULT_TETROMINO).shape,\n    collided: false,\n  });\n\n  const rotate = ({ tetromino, dir }) => {\n    // Make the rows to become cols (transpose)\n    const mtrx = tetromino.map((_, index) => {\n      return tetromino.map(column => {\n        return column[index];\n      });\n    });\n    // Reverse each row to get a rotaded tetromino\n    if (dir > 0) {\n      return mtrx.map(row => {\n        return row.reverse();\n      });\n    }\n    return mtrx.reverse();\n  };\n\n  return {\n    player,\n    updatePlayerPos: ({ x, y, collided }) => {\n      setPlayer(prev => {\n        const copy = { ...prev };\n\n        const state = {\n          ...prev,\n          pos: {\n            x: (copy.pos.x += x),\n            y: (copy.pos.y += y),\n          },\n          collided,\n        };\n\n        return {\n          ...state,\n        };\n      });\n    },\n    resetPlayer: useCallback(() => {\n      setPlayer({\n        pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n        tetromino: getRandomTetromino().shape,\n        collided: false,\n      });\n    }, []),\n    playerRotate: (stage, dir) => {\n      const CLONED_PLAYER = JSON.parse(JSON.stringify(player));\n      CLONED_PLAYER.tetromino = rotate({ ...CLONED_PLAYER, dir });\n\n      const { x } = CLONED_PLAYER.pos;\n      let offset = 1;\n\n      while (checkCollision(CLONED_PLAYER, stage, { x: 0, y: 0 })) {\n        CLONED_PLAYER.pos.x += offset;\n        offset = -(offset + (offset > 0 ? 1 : -1));\n        if (offset > CLONED_PLAYER.tetromino[0].length) {\n          rotate({ ...CLONED_PLAYER, dir: -dir });\n          CLONED_PLAYER.pos.x = x;\n          return;\n        }\n      }\n\n      setPlayer(CLONED_PLAYER);\n    },\n  };\n};\n\nexport const useStage = ({ collided, pos, tetromino }, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const { x, y } = pos;\n    // Here are the updates\n    setStage(prevStage => {\n      const copy = [...prevStage];\n      // const { x, y } = pos;\n      // First flush the stage\n      const NEW_STAGE = copy.map(row => {\n        return row.map(cell => {\n          return cell[1] === STAGE_TYPE_CLEAR ? [0, STAGE_TYPE_CLEAR] : cell;\n        });\n      });\n\n      // Then draw the tetromino\n      tetromino.forEach((row, rowIdx) => {\n        row.forEach((value, valueiIdx) => {\n          if (value !== 0) {\n            NEW_STAGE[rowIdx + y][valueiIdx + x] = [\n              value,\n              `${collided ? STAGE_TYPE_MERGED : STAGE_TYPE_CLEAR}`,\n            ];\n          }\n        });\n      });\n\n      // Then check if we got some score if collided\n      if (collided) {\n        resetPlayer();\n        return NEW_STAGE.reduce((all, row) => {\n          if (\n            row.findIndex(cell => {\n              return cell[0] === 0;\n            }) === -1\n          ) {\n            setRowsCleared(prev => {\n              return prev + 1;\n            });\n            all.unshift(\n              new Array(NEW_STAGE[0].length).fill([0, STAGE_TYPE_CLEAR])\n            );\n            return all;\n          }\n\n          return [...all, row];\n        }, []);\n      }\n\n      return NEW_STAGE;\n    });\n  }, [collided, pos, tetromino, resetPlayer]);\n\n  return {\n    stage,\n    rowsCleared,\n    resetStage: () => {\n      return setStage(createStage());\n    },\n  };\n};\n","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport Tetris from './components/Tetris';\nimport { THEME, GlobalStyle } from './utils/styles';\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={THEME}>\n      <GlobalStyle />\n      <Tetris />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}